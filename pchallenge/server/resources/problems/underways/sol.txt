import java.io.*;
import java.util.*;
import java.math.*;

public class Main implements Runnable {

    private static class T {
        int j;
        long d;

        public T(int j, long d) {
            this.j = j;
            this.d = d;
        }
    }

    public void run() {
        long startTime = System.nanoTime();

        int n = nextInt();
        List<List<T>> g1 = read(n);
        List<List<T>> g2 = read(n);

        final long[] d = new long[n];
        final long[] f = new long[n];
        dj(n, 0, d, f, 0, g1);

        long min = -1, max = (long) 1e10;
        while (max - min > 1) {
            long mid = min + max >> 1;

            dj(n, n - 1, f, d, mid, g2);
            if (f[0] > d[n - 1]) {
                max = mid;
            } else {
                min = mid;
            }

        }

        if (max > 9e9) {
            println(-1);
        } else {
            println(max);
        }


        if (fileIOMode) {
            System.out.println((System.nanoTime() - startTime) / 1e9);
        }
        out.close();
    }

    private static boolean[] t = new boolean[8888];
    private static void dj(int n, int s, final long[] f, long[] d, long add, List<List<T>> g) {
        PriorityQueue<Integer> q = new PriorityQueue<Integer>(n, new Comparator<Integer>() {
            public int compare(Integer o1, Integer o2) {
                return Long.signum(f[o1] - f[o2]);
            }
        });
        Arrays.fill(t, false);
        Arrays.fill(f, (long) 1e15);
        f[s] = 0;
        q.add(s);
        while (!q.isEmpty()) {
            int x = q.poll();
            if (t[x]) {
                continue;
            }
            t[x] = true;
            if (f[x] > d[x] && x != 0) {
                f[x] += add;
            }
            for (T y : g.get(x)) {
                long c = f[x] + y.d;
                if (f[y.j] > c) {
                    f[y.j] = c;
                    q.add(y.j);
                }
            }
        }
    }

    private static List<List<T>> read(int n) {
        List<List<T>> g1 = new ArrayList<List<T>>(n);
        for (int i = 0; i < n; i++) {
            g1.add(new ArrayList<T>());
        }
        int a = nextInt();
        for (int i = 0; i < a; i++) {
            int x = nextInt() - 1;
            int y = nextInt() - 1;
            int d = nextInt();
            g1.get(x).add(new T(y, d));
            g1.get(y).add(new T(x, d));
        }
        return g1;
    }

    //-----------------------------------------------------------------------------------

    private static boolean fileIOMode;
    private static String problemName = "war";
    private static BufferedReader in;
    private static PrintWriter out;
    private static StringTokenizer tokenizer;

    public static void main(String[] args) throws Exception {
//        problemName += Integer.parseInt(args[0]);
        fileIOMode = true;
        if (fileIOMode) {
            in = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
        } else {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
        }
        tokenizer = new StringTokenizer("");

        new Thread(new Main()).start();
    }

    private static String nextLine() {
        try {
            return in.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    private static String nextToken() {
        while (!tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(nextLine());
        }
        return tokenizer.nextToken();
    }

    private static int nextInt() {
        return Integer.parseInt(nextToken());
    }

    private static long nextLong() {
        return Long.parseLong(nextToken());
    }

    private static double nextDouble() {
        return Double.parseDouble(nextToken());
    }

    private static BigInteger nextBigInteger() {
        return new BigInteger(nextToken());
    }

    private static void print(Object o) {
        if (fileIOMode) {
            System.out.print(o);
        }
        out.print(o);
    }

    private static void println(Object o) {
        if (fileIOMode) {
            System.out.println(o);
        }
        out.println(o);
    }

    private static void printf(String s, Object... o) {
        if (fileIOMode) {
            System.out.printf(s, o);
        }
        out.printf(s, o);
    }
}
